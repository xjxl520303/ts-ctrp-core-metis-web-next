{
	// 在线编辑：https://snippet-generator.app/?description=&tabtrigger=&snippet=&mode=vscode
	"component": {
		"prefix": "zx-com",
		"scope": "vue",
		"body": [
			"<script lang=\"ts\" setup>",
			"const props = withDefaults(defineProps<{",
			"  modelValue: boolean",
			"}>(), {})",
			"",
			"const emit = defineEmits<{",
			"  (e: 'update:modelValue', val: boolean): void",
			"}>()",
			"",
			"defineOptions({",
			"  name: '${RELATIVE_FILEPATH/(^.+\\/(.+)\\/src\\/index\\.vue$)|(^.+\\/(.+)\\/index\\.vue$)|(^.+\\/(.+)\\.vue$)/${2:/pascalcase}${4:/pascalcase}${6:/pascalcase}/}',",
			"  inheritAttrs: false,",
			"})",
			"",
			"const localModelValue = ref(props.modelValue)",
			"",
			"watch(() => props.modelValue, (val) => {",
			"  localModelValue.value = val",
			"})",
			"",
			"watch(() => localModelValue.value, (val) => {",
			"  emit('update:modelValue', val)",
			"})",
			"</script>",
			"",
			"<template>",
			"  <div>${RELATIVE_FILEPATH/(^.+\\/(.+)\\/src\\/index\\.vue$)|(^.+\\/(.+)\\/index\\.vue$)|(^.+\\/(.+)\\.vue$)/${2:/pascalcase}${4:/pascalcase}${6:/pascalcase}/}</div>",
			"</template>",
			""
		],
		"description": "项目组件样板代码"
	},

	"xstate-machine-1": {
		"prefix": "x-m-1",
		"body": [
			"/* eslint-disable @typescript-eslint/consistent-type-definitions */",
			"import type { ErrorPayload, Result } from '@/types'",
			"import { URL_PREFIX } from '@/constants'",
			"import { RequestEnum, ResponseCodeEnum } from '@/enums'",
			"import type { GetMenuResponse } from '@/types/responses'",
			"import callApi from '@/utils/request'",
			"",
			"export type ${RELATIVE_FILEPATH/^.+\\/(.+)\\.ts$/${1:/pascalcase}/}Context = {",
			"  error: ErrorPayload | null",
			"}",
			"",
			"export type ${RELATIVE_FILEPATH/^.+\\/(.+)\\.ts$/${1:/pascalcase}/}Events =",
			"  | { type: 'REQUEST'; data: any }",
			"  | { type: 'SET.tabVisible'; visible: boolean }",
			"",
			"export type ${RELATIVE_FILEPATH/^.+\\/(.+)\\.ts$/${1:/pascalcase}/}Services = {",
			"  request: GetMenuResponse",
			"}",
			"",
			"export type ${RELATIVE_FILEPATH/^.+\\/(.+)\\.ts$/${1:/pascalcase}/}Machine = ReturnType<typeof create${RELATIVE_FILEPATH/^.+\\/(.+)\\.ts$/${1:/pascalcase}/}Machine>",
			"",
			"export const create${RELATIVE_FILEPATH/^.+\\/(.+)\\.ts$/${1:/pascalcase}/}Machine = () => {",
			"  return createMachine(",
			"    {",
			"      schema: {",
			"        context: {} as ${RELATIVE_FILEPATH/^.+\\/(.+)\\.ts$/${1:/pascalcase}/}Context,",
			"        events: {} as ${RELATIVE_FILEPATH/^.+\\/(.+)\\.ts$/${1:/pascalcase}/}Events,",
			"        services: {} as ${RELATIVE_FILEPATH/^.+\\/(.+)\\.ts$/${1:/pascalcase}/}Services,",
			"      },",
			"      tsTypes: {},",
			"      predictableActionArguments: true,",
			"      id: '${RELATIVE_FILEPATH/^.+\\/(.+)\\.ts$/$1/}',",
			"      context: {",
			"        error: null,",
			"      },",
			"      initial: 'idle',",
			"      states: {",
			"        idle: {",
			"          on: {",
			"            REQUEST: {",
			"              target: 'xx',",
			"              actions: ['xx'],",
			"            },",
			"          },",
			"        },",
			"      },",
			"      action: {",
			"        // 定义 Action",
			"      },",
			"    },",
			"    {",
			"      actions: {",
			"        xx: assign({ error: (_, { data }) => data }),",
			"      },",
			"      services: {",
			"        /**",
			"         * 获取菜单",
			"         **/",
			"        request: async () => {",
			"          const res: Result = await callApi({",
			"            url: `\\${URL_PREFIX}/menu/getMenu`,",
			"            method: RequestEnum.GET,",
			"          })",
			"          if (res.code === ResponseCodeEnum.SUCCESS)",
			"            return res.data",
			"          else",
			"            return Promise.reject(res)",
			"        },",
			"      },",
			"    },",
			"  )",
			"}"
		],
		"description": "xstate-machine-1"
	},

	"xstate-machine-2": {
		"prefix": "x-m-2",
		"body": [
			"/* eslint-disable @typescript-eslint/consistent-type-definitions */",
			"import type { ${RELATIVE_FILEPATH/(^.+)\\/(.+)\\/machine\\.ts$/${2:/pascalcase}/}Context } from './context'",
			"import { INITIAL_DYNAMIC_LIST_CONTEXT } from './context'",
			"import type { ${RELATIVE_FILEPATH/(^.+)\\/(.+)\\/machine\\.ts$/${2:/pascalcase}/}Events } from './events'",
			"import type { GetDynamicListResponse, GetPageConfigResponse } from '@/types/responses'",
			"import callApi from '@/utils/request'",
			"import { URL_PREFIX } from '@/constants'",
			"import { RequestEnum, ResponseCodeEnum } from '@/enums'",
			"import type { Result } from '@/types'",
			"",
			"type ${RELATIVE_FILEPATH/(^.+)\\/(.+)\\/machine\\.ts$/${2:/pascalcase}/}Services = {",
			"  getPageConfig: GetPageConfigResponse",
			"  getDynamicList: GetDynamicListResponse",
			"}",
			"",
			"export type ${RELATIVE_FILEPATH/(^.+)\\/(.+)\\/machine\\.ts$/${2:/pascalcase}/}Machine = ReturnType<typeof create${RELATIVE_FILEPATH/(^.+)\\/(.+)\\/machine\\.ts$/${2:/pascalcase}/}Machine>",
			"",
			"export const create${RELATIVE_FILEPATH/(^.+)\\/(.+)\\/machine\\.ts$/${2:/pascalcase}/}Machine = () => {",
			"  return createMachine({",
			"    schema: {",
			"      context: {} as ${RELATIVE_FILEPATH/(^.+)\\/(.+)\\/machine\\.ts$/${2:/pascalcase}/}Context,",
			"      events: {} as ${RELATIVE_FILEPATH/(^.+)\\/(.+)\\/machine\\.ts$/${2:/pascalcase}/}Events,",
			"      services: {} as ${RELATIVE_FILEPATH/(^.+)\\/(.+)\\/machine\\.ts$/${2:/pascalcase}/}Services,",
			"    },",
			"    tsTypes: {},",
			"    predictableActionArguments: true,",
			"    id: '${RELATIVE_FILEPATH/^.+\\/(.+)\\.ts$/$1/}',",
			"    context: INITIAL_DYNAMIC_LIST_CONTEXT,",
			"    type: 'parallel',",
			"    states: {",
			"      ui: {",
			"        on: {",
			"",
			"        },",
			"      },",
			"      api: {",
			"        states: {",
			"          getPageConfig: {",
			"            invoke: {",
			"              src: 'getPageConfig',",
			"              onDone: {",
			"                target: '.success',",
			"                actions: 'initPageConfig',",
			"              },",
			"              onError: { target: '.failed', actions: 'handleError' },",
			"            },",
			"            states: {",
			"              success: {},",
			"              failed: {},",
			"            },",
			"          },",
			"        },",
			"        on: {",
			"          GET_PAGE_CONFIG: {",
			"            target: 'api.getPageConfig',",
			"          },",
			"        },",
			"      },",
			"    },",
			"  }, {",
			"    actions: {",
			"      handleError: assign({ error: (_, event: any) => event.data }),",
			"",
			"      /** 初始化页面配置信息 */",
			"      initPageConfig: assign({}),",
			"    },",
			"    services: {",
			"      /**",
			"       * 获取页面配置信息",
			"       **/",
			"      getPageConfig: async (_, { menuId }) => {",
			"        const res: Result = await callApi({",
			"          url: `\\${URL_PREFIX}/menu/getPageConfig`,",
			"          method: RequestEnum.GET,",
			"          params: {",
			"            menuId,",
			"          },",
			"        })",
			"        if (res.code === ResponseCodeEnum.SUCCESS)",
			"          return { ...res.data, menuId }",
			"        else",
			"          return Promise.reject(res)",
			"      },",
			"    },",
			"  })",
			"}",
			""
		],
		"description": "xstate-machine-2"
	},

	"test": {
		"prefix": "test",
		"body": [
			// "${RELATIVE_FILEPATH/(^.+)\\/(.+)\\/machine\\.ts$/${2:/upcase}/}",
			"${RELATIVE_FILEPATH/(^.+)\\/(.+)\\/machine\\.ts$/${${2:/upcase}/-/_/}/}",
		],
		"description": "测试"
	},
}